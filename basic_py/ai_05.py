# Модуль Urok2

import random


# Обучающая выборка (идеальное изображение цифр от 0 до 9)
num0 = list('111101101101111')
num1 = list('001001001001001')
num2 = list('111001111100111')
num3 = list('111001111001111')
num4 = list('101101111001001')
num5 = list('111100111001111')
num6 = list('111100111101111')
num7 = list('111001001001001')
num8 = list('111101111101111')
num9 = list('111101111001111')
# Тестовая выборка (различные варианты изображения цифры 5) 
num51 = list('111100111000111') 
num52 = list('111100010001111') 
num53 = list('111100011001111') 
num54 = list('110100111001111') 
num55 = list('110100111001011') 
num56 = list('111100101001111')

# Список всех цифр от 0 до 9 в едином массиве
nums = [num0, num1, num2, num3, num4, num5, num6, num7, num8, num9]

thema = 5 # Какой цифре обучаем
n_sensor = 15 # Количество сенсеров

# Инициализация весов для связей сенсоров с сумматором
weights = [] # Данный код создает пустой список weights и затем в цикле добавляет 15 нулей в этот список.
for i in range(15): 
    weights.append(0) # данный цикл обнуляет значения всех весов
    #weights.append(random.choice([0, 1])) # случайный выбор значения 0 или 1

# weights = [О for i in range(15)] # Обнуление весов

# Функция определяет, является ли полученное изображение 5
# Возвращает Да, если признанно, что это 5. Возвращает Нет, если отвергнуто, что это 5

"""""
def perceptron(Sensor):
    b = 7 # Порог функции активации
    s = 0 # Начальное значение суммы
    for i in range(n_sensor): # цикл суммирования сигналов от сенсоров
        s += int(Sensor[i]) * weights[1]
        if s >= b:
            return True # Сумма превысила порог
        else:
            return False # Сумма меньше порога
Персептрон не правильно классифицирует цифру 5 из-за неправильной реализации функции "perceptron". 
В данной функции происходит ошибка, так как она суммирует только первый элемент сенсора с первым весом, а затем сразу возвращает результат. 
Это означает, что функция не учитывает сумму сигналов от всех сенсоров и не применяет пороговую функцию активации корректно.

Чтобы исправить эту ошибку, необходимо изменить функцию "perceptron" следующим образом:
"""""

def perceptron(Sensor):
    b = 7 # Порог функции активации
    s = 0 # Начальное значение суммы
    for i in range(n_sensor): # цикл суммирования сигналов от сенсоров
        s += int(Sensor[i]) * weights[i] # умножаем каждый элемент сенсора на соответствующий вес
    if s >= b:
        return True # Сумма превысила порог
    else:
        return False # Сумма меньше порога 



# Уменьшение значений весов
# Если сеть ошиблась и выдала Да при входной цифре, отличной от пятёрки
def decrease(number):
    for i in range(n_sensor):
        if int(number[i]) == 1: # Возбуждённый ли вход
            weights[i] -= 1 # Уменьшаем связанный с входом вес на единицу

# Увеличение значения весов
# Если сеть не ошиблась и выдала Да при поданной на вход цифре 5
def increace(number):
    for i in range(n_sensor):
        if int(number[i]) == 1: # Возбуждённый ли вход
            weights[i] += 1 # Увеличиваем связанный с входом вес на единицу

# Тренировка сети
n = 10000 # Количество уроков
for i in range(n):
    j = random.randint(0, 9) # Генерируем случайное число j от 0 до 9
    r = perceptron(nums[j]) # Результат обращения к сумматору
    # (ответ - Да или Нет)
    if j != thema: # Если генератор выдал случайное число j, не равное 5
        if r: # Если сумматор сказал Да (это пятёрка), а j это не пятёрка.
            # Ошибся
            decrease(nums[j]) # Наказываем сеть (уменьшаем значения весов)
    else: # Если генератор выдал случайное число j, равное 5
        if not r: # Если сумматор сказал Нет (с not значит Да - это пятёрка), и j=5. Не ошибся
            increace(nums[thema]) # Поощряем сеть (увеличиваем значения весов)


print(j)


print(weights) # Вывод значений весов 
# проверка работы программы на обучающей выборке 
print("0 это 5?", perceptron(num0)) 
print("l это 5?", perceptron(num1)) 
print("2 это 5?", perceptron(num2)) 
print("3 это 5?", perceptron(num3)) 
print("4 это 5?", perceptron(num4)) 
print("5 это 5?", perceptron(num5)) 
print("6 это 5?", perceptron(num6)) 
print("7 это 5?", perceptron(num7)) 
print("8 это 5?", perceptron(num8)) 
print("9 это 5?", perceptron(num9))


# Прогон по тестовой выборке 
print("Узнал 5 в 51?", perceptron(num51)) 
print("Yзнaл 5 в 52?", perceptron(num52)) 
print("Узнал 5 в 53?", perceptron(num53)) 
print("Узнал 5 в 54?", perceptron(num54)) 
print("Yзнaл 5 в 55?", perceptron(num55)) 
print("Узнал 5 в 56?", perceptron(num56))
